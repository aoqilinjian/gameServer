import "options.proto"; 
option optimize_for = CODE_SIZE;

// -----------------------------------------
// 数据集合体
// -----------------------------------------

// 2D坐标信息
message DVector2 {
	optional float x 					= 1; // 横坐标
	optional float y 					= 2; // 纵坐标
}

// 3D坐标信息
message DVector3 {
	optional float x 					= 1; // X坐标
	optional float y 					= 2; // Y坐标
	optional float z 					= 3; // Z坐标
}

// 玩家信息
message DHuman {
	required int64 id 					= 1; // 玩家id
	optional int64 diamond 				= 2;// 钻石
	optional int64 bindingDiamond		= 3;//绑定钻石
	optional int64 gold 				= 4;// 金币
	optional int64 openFunctions		= 5;// 开启的功能（每一位就是一个功能）
	optional int32 keyCount				= 6;// 钥匙数
	optional int32 openBoxCount			= 7;// 今日开启宝箱的次数
	optional int32 skillPoint			= 8;// 技能点
	optional int32 skill 				= 9;// 装备的技能
	optional int32 pet 					= 10;// 宠物
	optional int32 emoj 				= 11;// 表情
	optional int32 foot 				= 12;// 脚印
	
	optional string name 				= 13; // 姓名
	optional string signature 			= 14; // 签名
	optional int32 level 				= 15; // 等级
	optional string head 				= 16; // 头像
	optional int32 sex 					= 17; // 性别
	optional int32 dan 					= 18; // 段位
	optional int32 star 				= 19; // 星级
	optional int32 protectScore			= 20; // 保护分
	optional int32 character			= 21;//角色
	optional int32 arms					= 22;//武器
	optional int32 headdress			= 23;//头饰
	optional int32 clothes				= 24;//服饰
	optional int32 attention 			= 25;// 关注数
	optional int32 fans 				= 26;// 粉丝数
	optional int32 like 				= 27;// 点赞数
	optional bool online				= 28; // 是否在线
	optional bool isFriend				= 29; // 是否是好友
}

// 查询其他玩家的简要信息
message DHumanSimpleInfo {
	required int64 id 					= 1; // 玩家id
	required string name 				= 2; // 姓名
	required string head 				= 3; // 头像
	required int32 sex 					= 4; // 性别
	required int32 dan 					= 5; // 段位
	required bool online				= 6; // 是否在线
	optional int64 time					= 7; // 时间
	optional bool isEnemy				= 8; // 最近游戏是否是敌人
	required int32 level 				= 9; // 等级
	optional double distence 			= 10;// 与我的距离 单位KM
}
// 点赞信息
message DLaudInfo {
	required string name 				= 1; // 姓名
	required string head 				= 2; // 头像
	required int32 laudNum 				= 3; // 点赞次数
}

// 场次
message DRoundData {
	required int32 rank 				= 1; // 名次
	required int32 mode 				= 2; // 模式
	required int32 killCount 			= 3; // 击杀数
	required int32 deadCount 			= 4; // 死亡数
	required int32 assistCount			= 5; // 助攻数
	required int64 timestamp 			= 6; // 比赛时间
}

// 赛季
message DSeasonData {
	required int32 num 					= 1; // 第几赛季
	required int32 dan 					= 2; // 段位
	required int32 star 				= 3; // 星级
}

// 卡片数据
message DCardData {
	required int32 sn 					= 1; // 卡片sn
	required int32 level 				= 2; // 卡片等级
	required int32 debrisCount			= 3; // 碎片数
	required int32 state 				= 4; // 状态(0:未合成1：已合成2：已解锁)
	required bool  carry 				= 5; // 是否携带
}

// 小屋物品数据
message DHutItem {
	required int32 sn 					= 1; // sn
	required bool  forever				= 2; //是否永久获得
	required bool  use 				    = 3; //是否正在使用
	optional int32 timeLimit 		    = 4; // 剩余时间(秒)
	required int32 used 				= 5; //是否使用过（0:未使用过1:使用过）
}

// kv
message DKV {
	required int32 k 					= 1;
	required int32 v					= 2; 	
}


// 历史类型类型
enum EHistoryDataType{
	GAMECOUNT		= 1;	// 游戏总场次
	GAMETIMETOTAL	= 2;	// 游戏总时长
	KILLCOUNT		= 3;	// 总击杀
	DEADCOUNT		= 4;	// 总死亡
	MAXSCORE		= 5;	// 历史最高分
	CHAMPIONCOUNT	= 6;	// 冠军获得总数
} 
// -----------------------------------------
// 账号验证
// -----------------------------------------

// 客户端请求：登录请求
message CSLogin {
	option (msgid) = 111;
	optional string account 					= 1; // 用户名
	optional string password 					= 2; // 密码
	optional string deviceId					= 3; // 设备id
	optional string channelId 					= 4; // 渠道id
	optional string version 					= 5; // 客户端版本号
}

// 服务器返回：登录请求返回结果
message SCLoginResult {
	option (msgid) = 112;
	required int32 resultCode					= 1; // 0=成功
}

// 客户端请求：断线重连
message CSAccountReconnect {
	option (msgid) = 121;
	required string account 					= 1; // 平台账号
	required int64 sessionKey 					= 2; // 连接关键字
}

// 服务器返回：断线重连返回结果
message SCAccountReconnectResult {
	option (msgid) = 122;
	optional int32 resultCode 					= 1; // 错误编号
}

// 服务器推送：登陆排队中
message SCAccountLoginQueue {
	option (msgid) = 153;
	optional int32 num 							= 1; // 排队人数
	optional int32 sec 							= 2; // 排队时间
}

// 客户端请求：输入激活码
message CSKeyActivate {
	option (msgid) = 154;
	optional string keyActivate 				= 1; // 激活码
}

// 服务器返回：激活码验证返回
message SCKeyActivate {
	option (msgid) = 155;
	optional bool resultCode					= 1; // 激活码是否正确
}

 
// -----------------------------------------
// 通用全局
// -----------------------------------------

// 客户端请求：拉取玩家信息
message CSInitData {
	option (msgid) = 1101;
}

// 服务器推送：玩家信息
message SCInitData {
	option (msgid) = 1102;
	required DHuman human 					= 1; // 玩家信息
	repeated DCardData ownedCards			= 2; // 拥有的卡片
	repeated int32 equipedCards				= 3; // 装备的卡片
	repeated DHutItem ownedHutItem			= 4; // 拥有小屋物品
}

// 服务器更新：用户属性变化（只限发送给本人）
message SCHumanInfoChange {
	option (msgid) = 1103;
	optional DHuman human = 1; 
}

// 服务器推送：服务器相关配置
message SCServerConfig {
	option (msgid) = 1104;
	required int64 timeNow 					= 1; //当前服务器时间
}

// 客户端请求：ping
message CSPing {
	option (msgid) = 1116;
}

// 服务器返回：ping
message SCPing {
	option (msgid) = 1117;
}

// 服务器推送：剔除玩家
message SCHumanKick {
	option (msgid) = 1120;
	required int32 resultCode 				= 1; // 被踢原因
}

// 服务器推送：错误提示
message SCHint {
	option (msgid) = 1121;
	required int32 strId 					= 1; // 提示表的id
	repeated string param 					= 2; // 参数的值
}
 
// -----------------------------------------
// 战斗
// -----------------------------------------

// 客户端请求：进入战斗
message CSBattleStart {
	option (msgid) = 1201;
	required int32 mode 				= 1; // 玩法类型
}

// 战斗玩家信息
message DBattlePlayer {
	repeated DKV items 					= 1; // 道具及等级
	optional int32 equiped 				= 2; // 装备的技能
	optional int32 pet 					= 3; // 宠物
	optional int32 emoj 				= 4; // 表情
	optional int32 foot 				= 5; // 脚印
	optional int32 skin 				= 6; // 皮肤
	required string name				= 7; //名字
	optional int32 character			= 8; //角色
	optional int32 arms					= 9; //武器
	optional int32 headdress			= 10; //头饰
	optional int32 clothes				= 11; //服饰
}

// 指令
message DBattleCMD {
	required int32 frame 				= 1; // 帧
	required int32 cmdType 				= 3; // 操作类型
	optional int32 arg1 				= 4;
	optional int32 arg2 				= 5;
	optional int32 arg3 				= 6;
	optional int32 arg4 				= 7;
	optional string arg5 				= 8;
}

// 服务器推送：战斗开始
message SCBattleStart {
	option (msgid) = 1202;
	required int32 sn 					= 1; // 副本sn
	required int32 mode					= 2; // 模式（网络 单机 录像）
	required int32 seed					= 3; // 随机种子
	required int32 playerId 			= 4; // 当前玩家id
	required int32 frame 				= 5; // 当前帧
	repeated DBattleCMD cmds 			= 6; // 指令
}

// 客户端请求：玩家指令
message CSBattleDo {
	option (msgid) = 1203;
	required int32 cmdType 				= 1; // 操作类型
	optional int32 arg1 				= 2;
	optional int32 arg2 				= 3;
	optional int32 arg3 				= 4;
	optional int32 arg4 				= 5;
	optional string arg5 				= 6;
}

// 服务器推送：玩家指令
message SCBattleDo {
	option (msgid) = 1204;
	repeated DBattleCMD cmds 			= 2; // 指令
}

// 客户端请求：战斗结束
message CSBattleOver {
	option (msgid) = 1205;
}

// 服务器推送：战斗结束
message SCBattleOver {
	option (msgid) = 1206;
}

// 服务器推送：帧包
message SCTick {
	option (msgid) = 1207;
	required int32 frame 				= 1; //服务器当前帧
}

// 服务器推送：战斗开始切图
message SCBattleStageSwitch {
	option (msgid) = 1208;
	required int32 sn 					= 1; // 副本sn
}
//前端战斗切图完成
message CSBattleStageSwitchEnd {
	option (msgid) = 1209;
}

// 客户端请求：离开战斗
message CSBattleLeave {
	option (msgid) = 1210;
}

// 服务器推送：离开战斗返回
message SCBattleLeaveResult {
	option (msgid) = 1211;
	required int32 resultCode 			= 1; // 0=成功
}
 
// -----------------------------------------
// 收集
// -----------------------------------------


// 更新某个卡片的信息
message SCUpdataCard {
	option (msgid) = 1301;
	optional DCardData card = 1;
}

// 携带
message CSCarryCard {
	option (msgid) = 1306;
	required int32 cardSn 	= 1; // sn
}

// 携带返回
message SCCarryCard {
	option (msgid) = 1307;
	required bool result 	= 1;// 结果
	optional int32 cardSn 	= 2;// sn
}
// 卸下卡片
message CSTakeOffCard {
	option (msgid) = 1308;
	required int32 cardSn 	= 1; // sn
}

// 卸下卡片返回
message SCTakeOffCard {
	option (msgid) = 1309;
	required bool result 	= 1;// 结果
	optional int32 cardSn 	= 2;// sn
}
// 卡片升级
message CSCardLevelUp {
	option (msgid) = 1310;
	required int32 cardSn 	= 1; // sn
}

// 卡片升级返回
message SCCardLevelUp {
	option (msgid) = 1311;
	required bool result 	= 1;// 结果
	optional int32 cardSn 	= 2;// sn
}
 
// -----------------------------------------
// 开房间
// -----------------------------------------

// 客户端请求：创建房间
message CSRoomCreate {
	option (msgid) = 1401;
}

// 房间中的成员
message DRoomMember {
	required int64 id 					= 1; // 玩家id
	required string name				= 2; // 玩家姓名
	required string head				= 3; // 玩家头像
	required int32 index				= 4; // 在房间中的位置0-11
	required bool leader				= 5; // 是否房主
}

// 服务器返回：创建房间
message SCRoomCreateResult {
	option (msgid) = 1402;
	required int32 resultCode 			= 1; // 0=成功
	optional int32 roomId				= 2; // 房间id
	optional DRoomMember member 		= 3; // 房主
}

// 客户端请求：加机器人
message CSRoomAddRobot {
	option (msgid) = 1403;
	required int32 camp 				= 1; // 阵营0,1,2
}

// 服务器推送：加机器人
message SCRoomAddRobot {
	option (msgid) = 1404;
	required DRoomMember member 		= 1; // 机器人
}

// 客户端请求：踢出玩家
message CSRoomKick {
	option (msgid) = 1405;
	required int32 index				= 1; // 在房间中的位置0-11
}

// 服务器推送：踢出玩家
message SCRoomKick {
	option (msgid) = 1406;
	required int32 index				= 1; // 在房间中的位置0-11
}

// 客户端请求：邀请玩家
message CSRoomInvite {
	option (msgid) = 1407;
	required int64 humanId				= 1; // 玩家id
}

// 服务器推送：邀请玩家
message SCRoomInvite {
	option (msgid) = 1408;
	required int32 roomId				= 1; // 房间id
	required int64 humanId 				= 2; // 邀请玩家id
	required string name				= 3; // 玩家姓名
	required string head				= 4; // 玩家头像
}

// 客户端请求：改变位置
message CSRoomChangeIndex {
	option (msgid) = 1409;
}

// 服务器返回：改变位置
message SCRoomChangeIndex {
	option (msgid) = 1410;
	required DRoomMember member 		= 1; // 成员
}

// 客户端请求：交换位置请求
message CSRoomSwapIndexRequest {
	option (msgid) = 1411;
	required int64 humanId				= 1; // 玩家id
}

// 服务器请求：交换位置请求
message SCRoomSwapIndexRequest {
	option (msgid) = 1412;
	required int64 humanId 				= 1; // 请求交换位置的玩家id
	required string name 				= 2; // 玩家姓名
	required string head				= 3; // 玩家头像
}

// 客户端请求：交换位置响应
message CSRoomSwapIndexResponse {
	option (msgid) = 1413;
	required int64 humanId				= 1; // 请求交换位置的玩家id
}

// 服务器返回：交换位置响应
message SCRoomSwapIndexResponse {
	option (msgid) = 1414;
	repeated DRoomMember members		= 1; // 变化的成员信息
}
 
// -----------------------------------------
// 组队
// -----------------------------------------

// 客户端请求：创建队伍
message CSTeamCreate {
	option (msgid) = 1501;
	required int32 battleSn 					= 1; // 玩法类型
}

// 队伍中的成员
message DTeamMember {
	required int64 id 					= 1; // 玩家id
	required string name				= 2; // 玩家姓名
	required string head				= 3; // 玩家头像
	required int32 dan 					= 4; // 玩家段位
	required int32 star 				= 5; // 玩家星级
	required bool leader				= 6; // 是否队长
	required bool prepare				= 7; // 准备状态
	required int32 character			= 8; //角色
	optional int32 arms					= 9;//武器
	optional int32 headdress			= 10;//头饰
	optional int32 clothes				= 11;//服饰
}

// 服务器返回：创建队伍
message SCTeamCreateResult {
	option (msgid) = 1502;
	required int32 resultCode			= 1; // 0=成功
	optional int32 teamId				= 2; // 队伍id
	optional DTeamMember member 		= 3; // 队长
}

// 客户端请求：邀请玩家
message CSTeamInvite {
	option (msgid) = 1503;
	required int64 humanId				= 1; // 玩家id
}

// 服务器返回：邀请玩家
message SCTeamInviteResult {
	option (msgid) = 1504;
	required int32 resultCode 			= 1; // 0=成功
}

// 服务器推送：收到邀请
message SCTeamInviteReceive {
	option (msgid) = 1505;
	required int32 teamId				= 1; // 队伍id
	required int64 humanId 				= 2; // 邀请玩家id
	required string name				= 3; // 玩家姓名
	required string head				= 4; // 玩家头像
}

// 客户端请求：加入队伍/同意邀请
message CSTeamJoin {
	option (msgid) = 1506;
	required int32 teamId				= 1; // 队伍id
}

// 服务器返回：加入队伍（自己收到的）
message SCTeamJoinResult {
	option (msgid) = 1507;
	required int32 resultCode 			= 1; // 0=成功
	optional int32 teamId				= 2; // 队伍id
	repeated DTeamMember members 		= 3; // 成员列表
}

// 服务器推送：加入队伍（其他队员收到的）
message SCTeamJoin {
	option (msgid) = 1508;
	required DTeamMember member 		= 1; // 加入的成员
}

// 客户端请求：退出队伍
message CSTeamLeave {
	option (msgid) = 1509;
}

// 服务器返回：退出队伍
message SCTeamLeaveResult {
	option (msgid) = 1510;
	required int32 resultCode 			= 1; // 0=成功
}

// 服务器推送：其他玩家退出队伍
message SCTeamLeave {
	option (msgid) = 1511;
	required int64 humanId 				= 1; // 离队玩家id
	optional int64 leaderId				= 2; // 新队长id（队长退队时会提升一个新队长）
}

// 客户端请求：踢出玩家
message CSTeamKick {
	option (msgid) = 1512;
	required int64 humanId				= 1; // 踢出的玩家id
}

// 服务器请求：剔出玩家
message SCTeamKickResult {
	option (msgid) = 1513;
	required int32 resultCode 			= 1; // 0=成功
	optional int64 humanId				= 2; // 踢出的玩家id
}

// 服务器推送：其他玩家被踢出
message SCTeamKick {
	option (msgid) = 1514;
	required int64 humanId				= 1; // 被踢出的玩家id
}
// 客户端请求：准备
message CSTeamPrepare {
	option (msgid) = 1515;
	required bool prepare				= 1; // 准备或取消准备
}

// 服务器返回：准备返回
message SCTeamPrepareResult {
	option (msgid) = 1516;
	required int32 resultCode 			= 1; // 0=成功
	optional bool prepare				= 2; // 准备或取消准备
}

// 服务器推送：其他玩家准备的状态
message SCTeamPrepare {
	option (msgid) = 1517;
	required int64 humanId 				= 1; // 玩家id
	required bool prepare			    = 2; // 准备或取消准备
}

//成员信息同步协议
message SCSyncMemberInfo{
	option (msgid) = 1518; 
	required DTeamMember member 		= 1; //成员
}

 
// -----------------------------------------
// 好友
// -----------------------------------------


// 关注
message CSAddFriend {
	option (msgid) = 1601;
	required int64 humanId					= 1; // 玩家Id
}
// 关注
message SCAddFriend {
	option (msgid) = 1602;
	required int32 resultCode				= 1; // 0=成功
	optional DHumanSimpleInfo friend		= 2;
}

// 取关
message CSDeleteFriend {
	option (msgid) = 1603;
	required int64 humanId					= 1; // 玩家Id
}
// 取关
message SCDeleteFriend {
	option (msgid) = 1604;
	required int32 resultCode				= 1; // 0=成功
	optional int64 humanId					= 2; // 玩家Id
}
// 点赞
message CSLaud {
	option (msgid) = 1605;
	required int64 humanId					= 1; // 玩家Id
}
// 点赞返回
message SCLaudResult {
	option (msgid) = 1606;
	required int32 resultCode				= 1; // 0=成功
	optional int64 humanId					= 2; // 玩家Id
	optional int32 like 					= 3; // 点赞数
}

// 查找好友
message CSFindFriend {
	option (msgid) = 1607;
	required string name					= 1; // 玩家名字或者玩家Id
}
// 查找好友返回
message SCFindFriend {
	option (msgid) = 1608;
	optional DHumanSimpleInfo friend		= 1; // 
}

// 获取我的好友列表
message CSGetMyFriends {
	option (msgid) = 1609;
	required int32 page						= 1; // 第几页（一页10个）
}
// 我的好友列表
message SCGetMyFriends {
	option (msgid) = 1610;
	repeated DHumanSimpleInfo friend		= 1; // 结果
}
// 获取我的粉丝列表
message CSGetMyFans {
	option (msgid) = 1611;
	required int32 page						= 1; // 第几页（一页10个）
}
// 我的粉丝列表
message SCGetMyFans {
	option (msgid) = 1612;
	repeated DHumanSimpleInfo fans			= 1; // 结果
}

// 获取指定玩家的详细信息
message CSGetPlayerInfo {
	option (msgid) = 1613;
	required int64 humanId					= 1; // 玩家Id
}
// 指定玩家的详细信息
message SCGetPlayerInfo {
	option (msgid) = 1614;
	optional DHuman player					= 1; // 结果
}

// 获取指定玩家的点赞信息
message CSGetPlayerLaud {
	option (msgid) = 1615;
	required int64 humanId					= 1; // 玩家Id
	required int32 page					    = 2; // 第几页（一页10个）
}
// 指定玩家的点赞信息
message SCGetPlayerLaud {
	option (msgid) = 1616;
	repeated DLaudInfo laud					= 1; // 结果
	required int64 humanId					= 2; // 玩家Id
	required int32 page						= 3; // 第几页（一页10个）
}

// 获取最近战斗列表
message CSGetRecentPlayer {
	option (msgid) = 1617;
	required int32 page						= 1; // 第几页（一页10个）
}
// 我的最近战斗列表
message SCGetRecentPlayers {
	option (msgid) = 1618;
	repeated DHumanSimpleInfo friend		= 1; // 结果
}

// 获取附近玩家列表
message CSGetNearbyPlayer {
	option (msgid) = 1619;
	required int32 page						= 1; // 第几页（一页10个）
}
// 附近玩家列表
message SCGetNearbyPlayer {
	option (msgid) = 1620;
	repeated DHumanSimpleInfo friend		= 1; // 结果
}


//获取黑名单列表
message CSGetBlacklist {
    option (msgid) = 1621;
}

//获取黑名单列表返回
message SCGetBlacklist {
    option (msgid) = 1622;
    repeated DHumanSimpleInfo list	    	= 1; //玩家列表
}

//增加黑名单
message CSAddBlacklist {
	option (msgid) = 1623;
	required int64 humanId 					= 1; //玩家Id
}
//增加黑名单
message SCAddBlacklist {
	option (msgid) = 1624;
	required int32 resultCode				= 1; // 0=成功
	optional int64 humanId 					= 2; //玩家Id
}

//删除黑名单
message CSRemoveBlacklist {
	option (msgid) = 1625;
	required int64 humanId 					= 1; //玩家Id
}
//删除黑名单
message SCRemoveBlacklist {
	option (msgid) = 1626;
	required int32 resultCode				= 1; // 0=成功
	required int64 humanId 					= 2; //玩家Id
}

// 获取最近聊天列表
message CSGetRecentChat {
	option (msgid) = 1627;
}
// 我的最近聊天列表
message SCGetRecentChat {
	option (msgid) = 1628;
	repeated DHumanSimpleInfo friend		= 1; // 结果
}
 
// -----------------------------------------
// 小屋
// -----------------------------------------


// 更新某个物品的信息
message SCUpdataHutItem {
	option (msgid) = 1701;
	optional DHutItem item = 1;
}
// 打开小屋
message CSOpenHut {
	option (msgid) = 1702;
}
// 打开小屋返回
message SCOpenHut {
	option (msgid) = 1703;
	repeated DHutItem iem = 1;
}

// 使用
message CSUseHutItem {
	option (msgid) = 1704;
	required int32 sn 	= 1; // sn
}

// 使用返回
message SCUseHutItem {
	option (msgid) = 1705;
	required int32 result 	= 1;// 结果
	optional int32 sn 		= 2;// sn
}

// 购买
message CSBuyHutItem {
	option (msgid) = 1706;
	required int32 sn 		 = 1; // sn
	required int32 timeIndex = 2; // 时间类型
	required int32 moneyType = 3; // 货币类型
	
}
// 购买返回
message SCBuyHutItem {
	option (msgid) = 1707;
	required int32 result 	= 1;// 结果
	optional int32 sn 		= 2; // sn
}
// 赠送
message CSGiftHutItem {
	option (msgid) = 1708;
	required int32 sn 		 = 1; // sn
	required int32 timeIndex = 2; // 时间类型
	required int32 moneyType = 3; // 货币类型
}
// 赠送返回
message SCGiftHutItem {
	option (msgid) = 1709;
	required int32 result 	= 1;// 结果
} 
// -----------------------------------------
// 信息、聊天相关
// -----------------------------------------

//聊天信息基本结构
message DMSG{
	required int32 channel 				  = 1;  // 频道
	required string content 			  = 2;  // 内容
	required int64 timestamp              = 3;  // 服务器时间戳(秒)
	required int64  sendHumanId 		  = 4;  // 发送者ID
	required string sendHumanName 		  = 5;  // 发送者名字
	required int32  sendHumanLevel		  = 6;  // 发送者等级
	optional string  sendHumanHeadSn 	  = 7; 	// 发送者头像
	optional int32 sendHumanSex			  = 8; 	// 发送者性别
	optional string voiceURL			  = 9; 	// 语音聊天URL
	optional int64  receiveHumanId 		  = 10; // 接收者ID
}

//聊天信息推送
message SCChat {
	option (msgid) = 1801;
	optional DMSG msg 					= 1; // 聊天基本信息
}

//聊天信息
message CSChat {
	option (msgid) = 1802;	
	required int32 channel 				= 1; // 频道
	required string content 			= 2; // 内容	
	optional int64 targetKey 			= 3; // 私聊时的目标玩家id
	repeated int64 items				= 4; // 超链接中所带物品id	
	optional string voiceURL			= 5; // 语音聊天URL	
}

//打包发送聊天消息
message SCChatPack {
	option (msgid) = 1803;
	repeated SCChat chatMsg 		= 1; // 聊天消息
}

//获得世界聊天信息缓存
message CSGetWorldChatBuffer {
	option (msgid) = 1804;	
}
 
// -----------------------------------------
// 邮件系统相关
// -----------------------------------------

//邮件摘要结构体
message DMail {
	required int64 id = 1;				//ID
	required string title = 2;			//标题
	required int64 timestamp = 3;		//发送时间(单位秒)
	required bool read = 4;				//是否已读
	required bool hasItem = 5;			//是否有附件物品
	required bool pickup = 6;			//是否已经领取物品（没有附件的邮件此项恒为false）	
}

//角色登录后服务器推送一次邮件列表
message SCInitMailList {
	option (msgid) = 1901;
	repeated DMail mails = 1;
}

//打开一封邮件
message CSGetMailDetail {
	option (msgid) = 1902;
	required int64 id = 1;
}

//返回打开邮件详细信息
message SCGetMailDetail {
	option (msgid) = 1903;
	required int64 id = 1;				//id
	required string detail = 2;			//邮件正文
	repeated int32 itemSns = 3;			//物品sn
	repeated int32 itemNums = 4;		//物品数量，与sn一一对应
	optional int64 delTimestamp = 5;	//失效时间：删除时间
	optional int64 receiver = 6;		//接受者
	optional string receiverName = 7;	//接受者名字	
	optional int64 sender = 8;			//发送者ID
	optional string senderName = 9;		//发送者名字
}

//将邮件设置为已读(id=0为一键全部已读)
message CSReadMail {
	option (msgid) = 1904;
	required int64 id = 1;				//阅读邮件后，将邮件设置为已读
}

//将邮件设置为已读返回
message SCReadMail {
	option (msgid) = 1905;
	repeated int64 ids = 1;				//本次设置为已读的邮件id集合
}

//新增邮件提醒
message SCMailNewRemind {
	option (msgid) = 1906;
	required DMail mail = 1;			//新增邮件摘要
}

//领取物品(id=0为一键提取)
message CSPickupMailItem {
	option (msgid) = 1907;
	required int64 id = 1;				//邮件ID
}

//领取物品结果（领一封邮件失败时pickedUpIds为空，result为false，一键领取时只要有附件未领取时result为false，pickedUpIds为领过附件的邮件id）
message SCPickupItemMailResult {
	option (msgid) = 1908;
	repeated int64 pickedUpIds = 1;		//领取过附件的邮件id集合
	required int32 result = 2;			//整体的领取结果(错误码str.xlsx)
	required bool isPickUpAll = 3;		//是否是一键领取
}

//删除邮件(mailId=0为一键删除)
message CSMailRemove {
	option (msgid) = 1909;
	required int64 id = 1;		//被删除邮件id
}

//删除邮件返回
message SCMailRemove {
	option (msgid) = 1910;
	repeated int64 ids = 1;		//被删除邮件id集合
}
 
// -----------------------------------------
// 玩家信息相关
// -----------------------------------------

//修改个人信息
message CSChangeName {
	option (msgid) = 2001;
	required string name 		= 1;		//名字
	required string signature 	= 2;		//签名
	required int32 sex 			= 3;		//性别(0:男1:女)
}
//修改个人信息返回
message SCChangeName {
	option (msgid) = 2002;
	required int32 resultCode 	= 1;      	// 0=成功
	optional string name 		= 2;		//名字
	optional string signature 	= 3;		//签名
	optional int32 sex 			= 4;		//性别(0:男1:女)
}
//修改个人信息头像
message CSChangeHead {
	option (msgid) = 2003;
	required string head 		= 1;		//头像
}
//修改个人信息头像返回
message SCChangeHead {
	option (msgid) = 2004;
	required int32 resultCode 	= 1;      	// 0=成功
	optional string head 		= 2;		//头像
}

//获取玩家战斗历史数据
message CSGetHistoryData {
	option (msgid) = 2005;
	required int64 humanId 		= 1;		//玩家Id
}
//玩家战斗历史数据返回
message SCGetHistoryData {
	option (msgid) = 2006;
	repeated DKV historydata 	= 1;      	// 历史数据
	repeated DKV seasondata 	= 2;      	// 本赛季数据
	required int64 humanId 		= 3;		// 玩家Id
}


//获取玩家战斗历史数据
message CSGetRoundData {
	option (msgid) = 2007;
	required int64 humanId 		= 1;		//玩家Id
}
//玩家战斗历史数据返回
message SCGetRoundData {
	option (msgid) = 2008;
	repeated DRoundData data 	= 1;      	// 历史数据
	required int64 humanId 		= 2;		//玩家Id
}


//获取玩家赛季数据
message CSGetSeasonData {
	option (msgid) = 2009;
	required int64 humanId 		= 1;		//玩家Id
}
//获取玩家赛季数据返回
message SCGetSeasonData {
	option (msgid) = 2010;
	optional DSeasonData data 	= 1;      	// 赛季数据
	required int64 humanId 		= 2;		//玩家Id
} 
// -----------------------------------------
// 测试消息
// -----------------------------------------
//从客户端发送到服务器

message CSGmCmd {
	option (msgid) = 9901;
	required string command	= 1; // GM命令
}
 
